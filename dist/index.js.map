{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 可以传入 deep 对比函数\n */\ntype CompareFun<T> = (prev: T, next: T) => boolean;\n\nfunction simpleCompare<T>(prev: T, next: T) {\n  return JSON.stringify(prev) === JSON.stringify(next);\n}\n\n/**\n * Generate a unique id to ensure that the DOM is not reused when the list is rendered\n * @param key\n */\nfunction generateUid(key: string | number) {\n  return `snapshot-history:${Date.now()}:${key}`;\n}\n\ninterface SnapshotHistoryConfig<T> {\n  /** 比对函数，目前只提供简单的函数 */\n  compareFun: CompareFun<T>;\n  /** 最大快照数量 */\n  maxSnapshots: number;\n  /** 添加 WeakMap 以便于生成唯一的 id */\n  withKey: boolean;\n  /** 使用 本地存储 */\n  storage: \"localStorage\" | \"sessionStorage\" | \"indexDB\";\n}\n\nclass SnapshotHistory<T> {\n  private uid: number = 1;\n  readonly maxSnapshots: number;\n  readonly compareFun: CompareFun<T>;\n  readonly withKey: boolean;\n  private snapshots: T[] = [];\n  private cursor: number = -1;\n\n  private keyByObj: WeakMap<Object, string> | null = null;\n\n  constructor(config: SnapshotHistoryConfig<T>) {\n    const {\n      maxSnapshots = 20,\n      compareFun = simpleCompare,\n      withKey = true,\n    } = config;\n    this.maxSnapshots = maxSnapshots;\n    this.compareFun = compareFun;\n    this.withKey = withKey;\n\n    this.initialKeyObj();\n  }\n\n  initialKeyObj(): void {\n    if (this.withKey) {\n      this.keyByObj = new WeakMap<Object, string>();\n    }\n  }\n\n  keyBy(snapshot: T): string | undefined {\n    if (!this.withKey) {\n      throw new Error('Please set the configuration item \"withKey\" to true');\n    }\n    return this.keyByObj!.get(snapshot);\n  }\n\n  get canUndo(): boolean {\n    return this.cursor > 0;\n  }\n\n  get canClear(): boolean {\n    return this.snapshots.length > 0;\n  }\n\n  get canRedo() {\n    return this.snapshots.length > this.cursor + 1;\n  }\n\n  record(snapshot: T) {\n    if (this.checkRepeat(snapshot)) {\n      return false;\n    }\n    // If the current cursor does not point to the last snapshot, discard all subsequent snapshots\n    while (this.cursor < this.snapshots.length - 1) {\n      const next: T = this.snapshots.pop() as T;\n      if (this.withKey) {\n        this.keyByObj!.delete(next);\n      }\n    }\n\n    if (this.withKey) {\n      this.keyByObj!.set(snapshot, generateUid(this.uid++));\n    }\n\n    this.snapshots.push(snapshot);\n\n    // Ensure that the number of history records is limited\n    if (this.snapshots.length > this.maxSnapshots) {\n      const prev: T = this.snapshots.shift() as T;\n      if (this.withKey) {\n        this.keyByObj!.delete(prev);\n      }\n    }\n    this.cursor = this.snapshots.length - 1;\n  }\n\n  undo() {\n    if (this.canUndo) {\n      this.cursor -= 1;\n      return this.snapshots[this.cursor];\n    }\n    return null;\n  }\n\n  redo() {\n    if (this.canRedo) {\n      this.cursor += 1;\n      return this.snapshots[this.cursor];\n    }\n    return null;\n  }\n\n  move(cursor: number) {\n    if (this.snapshots.length > cursor) {\n      this.cursor = cursor;\n      return this.snapshots[this.cursor];\n    }\n  }\n\n  clear() {\n    if (!this.canClear) {\n      return;\n    }\n    this.cursor = -1;\n    this.snapshots = [];\n    this.initialKeyObj();\n  }\n\n  checkRepeat(snapshot: T) {\n    const next = snapshot;\n    const prev = this.cursor >= 0 ? this.snapshots[this.cursor] : {};\n    // For more complex objects, it is recommended to use the deep equal library or write your own\n    return this.compareFun(prev as T, next);\n  }\n}\n\nexport default SnapshotHistory;\n"]}